package com.fairchild.jdkapi.security.jaas;import java.security.AccessControlContext;import java.security.AccessController;import java.security.Permission;import java.security.PermissionCollection;import java.security.Principal;import java.util.Iterator;import java.util.StringTokenizer;import javax.security.auth.Subject;public class ResourcePermission extends Permission {	static final public String OWNER_RELATIONSHIP = "OWNER";	static private int READ = 0x01;	static private int WRITE = 0x02;	static private int EXECUTE = 0x04;	static private int CREATE = 0x08;	static private int DELETE = 0x10;	static final public String READ_ACTION = "read";	static final public String WRITE_ACTION = "write";	static final public String EXECUTE_ACTION = "execute";	static final public String CREATE_ACTION = "create";	static final public String DELETE_ACTION = "delete";	protected int mask;	protected String relationShip;	protected Resource resource;	protected Subject subject;	/**	 * Constructor for ResourcePermission	 */	public ResourcePermission(String name) {		this(name, null, null, null, null);	}	/**	 * Constructor for ResourcePermission	 */	public ResourcePermission(String name, String actions) {		this(name, actions, null, null, null);	}	/**	 * Constructor for ResourcePermission	 */	public ResourcePermission(String name, String actions, String relationShip) {		this(name, actions, relationShip, null, null);	}	/**	 * Constructor for ResourcePermission	 */	public ResourcePermission(String name, String actions, Resource resource) {		this(name, actions, null, resource, null);	}	/**	 * Constructor for ResourcePermission	 */	public ResourcePermission(String name, String actions, Resource resource, Subject subject) {		this(name, actions, null, resource, subject);	}	/**	 * Constructor for ResourcePermission	 */	public ResourcePermission(String name, String actions, String relationShip, Resource resource) {		this(name, actions, relationShip, resource, null);	}	/**	 * Constructor for ResourcePermission	 */	public ResourcePermission(String name, String actions, String relationShip, Resource resource, Subject subject) {		super(name);		this.relationShip = relationShip;		this.resource = resource;		this.subject = subject;		parseActions(actions);	}	/**	 * @see Permission#getActions()	 */	public String getActions() {		StringBuffer buf = new StringBuffer();		if ((mask & READ) == READ)			buf.append(READ_ACTION);		if ((mask & WRITE) == WRITE) {			if (buf.length() > 0)				buf.append(", ");			buf.append(WRITE_ACTION);		}		if ((mask & EXECUTE) == EXECUTE) {			if (buf.length() > 0)				buf.append(", ");			buf.append(EXECUTE_ACTION);		}		if ((mask & CREATE) == CREATE) {			if (buf.length() > 0)				buf.append(", ");			buf.append(CREATE_ACTION);		}		if ((mask & DELETE) == DELETE) {			if (buf.length() > 0)				buf.append(", ");			buf.append(DELETE_ACTION);		}		return buf.toString();	}	/**	 * @see Permission#hashCode()	 */	public int hashCode() {		StringBuffer value = new StringBuffer(getName());		value.append(relationShip);		return value.toString().hashCode() ^ mask;	}	/**	 * @see Permission#equals(Object)	 */	public boolean equals(Object object) {		if (!(object instanceof ResourcePermission))			return false;		ResourcePermission p = (ResourcePermission) object;		return ((p.getName().equals(getName())) && (p.mask == mask) && (p.getRelationShip().equals(getRelationShip())));	}	/**	 * @see Permission#implies(Permission)	 */	public boolean implies(Permission permission) {		// The permission must be an instance of the ResourcePermission.		if (!(permission instanceof ResourcePermission))			return false;		// The resource name must be the same.		if (!(permission.getName().equals(getName())))			return false;		ResourcePermission p = (ResourcePermission) permission;		// If a relationship exists		String relation = getRelationShip();		if (relation != null) {			// The relationShip requires a resource			Resource rsc = p.getResource();			if (rsc == null)				return false;			// Get the Subject if specified otherwise get it from the AccessControllContext.			Subject user = p.getSubject();			if (user == null) {				AccessControlContext context = AccessController.getContext();				user = Subject.getSubject(context);			}			// If this is an owner relationship then check if the subject owns this resource.			if (relation.equalsIgnoreCase(OWNER_RELATIONSHIP)) {				if (!(isResourceOwner(user, rsc)))					return false;				// If this is not an owner relationship then delegate the relationship test to the resource.			} else if (!(rsc.fulfills(user, relation)))				return false;		}		// The action bits in p (permission) must be set in the current mask permission.		if ((mask & p.mask) != p.mask)			return false;		return true;	}	/**	 * Checks if the subject owns the resource by comparing all of the Subject's	 * principals to the resource.getOwner() value.	 */	private boolean isResourceOwner(Subject user, Resource resource) {		String owner = resource.getOwner();		Iterator it = user.getPrincipals().iterator();		while (it.hasNext()) {			Principal principal = (Principal) it.next();			if (principal.getName().equals(owner))				return true;		}		return false;	}	/**	 * Parses the actions string. Actions are separated by commas or white	 * space.	 */	private void parseActions(String actions) {		mask = 0;		if (actions != null) {			StringTokenizer tokenizer = new StringTokenizer(actions, ",\t ");			while (tokenizer.hasMoreTokens()) {				String token = tokenizer.nextToken();				if (token.equals(READ_ACTION))					mask |= READ;				else if (token.equals(WRITE_ACTION))					mask |= WRITE;				else if (token.equals(EXECUTE_ACTION))					mask |= EXECUTE;				else if (token.equals(CREATE_ACTION))					mask |= CREATE;				else if (token.equals(DELETE_ACTION))					mask |= DELETE;				else					throw new IllegalArgumentException("Unknown action: " + token);			}		}	}	/**	 * Gets the relationship	 * 	 * @return Returns a String	 */	public String getRelationShip() {		return relationShip;	}	/**	 * Gets the resource	 * 	 * @return Returns a Resource	 */	public Resource getResource() {		return resource;	}	/**	 * Gets the subject	 * 	 * @return Returns a Subject	 */	public Subject getSubject() {		return subject;	}	/**	 * @see Permission#newPermissionCollection()	 */	public PermissionCollection newPermissionCollection() {		return new ResourcePermissionCollection();	}	/**	 * @see Permission#toString()	 */	public String toString() {		return getName() + ":" + getActions();	}}