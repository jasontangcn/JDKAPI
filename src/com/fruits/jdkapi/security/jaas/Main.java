package com.fairchild.jdkapi.security.jaas;import java.security.Principal;import java.util.Iterator;import javax.security.auth.Subject;import javax.security.auth.login.LoginContext;import javax.security.auth.login.LoginException;/** * <p> * A command line example that uses the JAAS extension framework for instance * level access control. * </p> * <p> * The example prompts the user for a userid and password. It checks the * supplied userid and password with the entries in the users.xml file. After * the user is authenticated the example tries to create a UserProfile class * instance, modify it, and read from it.  * By default the owner of the UserProfile class is jane.  * When jane logs in all three operations are successful.  * When john logs in only the create operation is successful.  * When lou, janes manager, logs in only the first and last operation is successful. * When admin logs in all operations are successful.  * Of course, all this is only true if the supplied ResourcePolicy.xml file is not modified. * </p> */public class Main {	public static void main(String[] args) {		// Use the Example entry in the login configuration file to authenticate users.		LoginContext loginContext = null;		try {			loginContext = new LoginContext("Example", new ExampleCallbackHandler());		} catch (LoginException e) {			e.printStackTrace();			System.exit(-1);		}		try {			loginContext.login();		} catch (LoginException e) {			System.out.println("Unexpected exception - unable to continue.");			e.printStackTrace();			System.exit(-1);		}		// List the Principals the authenticated user has.		Iterator principalIterator = loginContext.getSubject().getPrincipals().iterator();		System.out.println("The authenticated user has the following Principals:");		while (principalIterator.hasNext()) {			Principal p = (Principal) principalIterator.next();			System.out.println("\t" + p.toString());		}		// Note that the UserProfile class has a hardcoded owner of jane.		// Normally the owner of the instance is the user who created it.		// The hardcode owner is used here for simplicity.		// Attempt to create a new UserProfile.		System.out.println("\nCreating a new UserProfile.");		Object object = Subject.doAs(loginContext.getSubject(), new CreateUserProfileAction());		System.out.println("Created UserProfile Successfully!\n");		// Attempt to write to the UserProfile created above.		// Catch the runtime AccessControlException if thrown so that		// we can continue and try to read from the created UserProfile.		try {			System.out.println("Updating UserProfile.");			UpdateUserProfileAction updateProfileAction = new UpdateUserProfileAction();			updateProfileAction.setProfile((UserProfile) object);			updateProfileAction.setUserName("Jane");			Subject.doAs(loginContext.getSubject(), updateProfileAction);			System.out.println("Updated UserProfile Successfully!\n");		} catch (java.security.AccessControlException e) {			System.out.println("Error: " + e.getMessage() + "\n");		}		// Attempt to read the UserProfile created above		try {			System.out.println("Reading UserProfile...");			ReadUserProfileAction readProfileAction = new ReadUserProfileAction();			readProfileAction.setProfile((UserProfile) object);			Subject.doAs(loginContext.getSubject(), readProfileAction);			System.out.println("Read UserProfile Successfully!\n");		} catch (java.security.AccessControlException e) {			System.out.println("Error: " + e.getMessage() + "\n");		}	}}